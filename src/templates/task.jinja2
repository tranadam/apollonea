{% extends "base.jinja2" %}
{% block main %}
  <main class="min-h-screen">
    <div
      class="mx-auto flex max-w-screen-2xl justify-between px-4 py-4 md:py-8 md:px-12"
    >
      <div class="w-full md:w-2/3">
        <a
          href="../"
          class="mt-4 mb-0.5 flow-root w-max rounded bg-secondary px-2 py-1 text-sm active:opacity-80"
          >{{ task.get_full_type(lang) }}</a
        >
        <h1 class="relative mb-2 font-playfair text-3xl font-bold">
          {{ task.get_variant(lang) }}
        </h1>
        <p class="mb-6">
          {{ solution_number }}
          {{ task.num_of_solutions }}
        </p>
        <div class="flex flex-col gap-y-4">
          {% for alt_solution in task.get_solution_methods(lang) %}
            <div class="flex flex-col gap-y-3" x-data="{isOpen: false}">
              <button
                @click="isOpen = !isOpen"
                class="flex w-full items-center gap-x-3 rounded-xl bg-white/60 py-5 px-6 shadow-[inset_0_2px_10px_rgba(0,0,0,0.05)] ring-1 ring-inset ring-gray-400/30 transition-all duration-200 hover:gap-x-4 active:opacity-80"
              >
                <svg
                  class="transition duration-150"
                  :class="isOpen ? 'rotate-90' : 'rotate-0'"
                  width="19"
                  height="19"
                  viewBox="0 0 11 19"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1 1L9.5 9.5L1 18"
                    stroke="black"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
                <div>
                  <p class="text-left text-xs uppercase tracking-wide ">
                    {{ solution_technique }}
                  </p>
                  <h2 class="text-left text-2xl font-medium">
                    {{ alt_solution["solution_name"] }}
                  </h2>
                </div>
              </button>
              <div x-show="isOpen" x-cloak x-transition>
                <div
                  class="mb-2 flex flex-col justify-between gap-y-1 sm:flex-row sm:items-center"
                >
                  <!-- Heading -->
                  <div class="flex items-center gap-x-1">
                    <h3 class="font-playfair text-2xl font-medium">
                      {{ geogebra_construction }}
                    </h3>
                    <img
                      src="/assets/info.svg"
                      tabindex="0"
                      alt="info"
                      class="mt-1 p-1"
                      data-tippy-content="{{ construction_info }}"
                    />
                  </div>
                  <!-- Download GeoGebra file -->
                  <a
                    class="group flex items-center gap-x-1 opacity-80 active:opacity-70"
                    download
                    href="/task_data/{{ task.get_type(lang)|upper }}/{{ alt_solution['file_name'].replace('.txt', '.ggb') }}"
                  >
                    <span
                      class="underline group-hover:no-underline group-focus-visible:no-underline"
                    >
                      {{ geogebra_download }}
                    </span>
                    <img class="h-7" src="/assets/download.svg" alt="" />
                  </a>
                </div>
                <!-- GeoGebra Embed Container -->
                <div id="{{ task.get_geogebra_file_path(alt_solution['file_name']) }}" class="mb-4 max-w-full ggb-element">
                  
                </div>


                <h3 class="mb-2 font-playfair text-2xl font-medium">
                  {{ postup }}
                </h3>
                <ol class="ml-5 flex list-decimal flex-col gap-y-2" start="{{ task.get_construction_first_step(alt_solution['file_name']) }}">
                  {% for step in task.get_construction_steps(alt_solution["file_name"], tasks, lang) %}
                    <li>{{ step }}</li>
                  {% endfor %}
                </ol>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
      <aside class="relative mt-6 hidden w-1/4 md:block">
        <div class="sticky top-20">
          <p class="mb-4 text-lg font-medium">
            {{ other_tasks }}
            - {{ task.get_type(lang)|upper }}
          </p>
          <ul class="flex flex-col gap-y-3">
            {% for same_task in task.get_same_type_tasks(tasks, lang) %}
              <li>
                <a
                  href="../{{ same_task.get_path_name(lang) }}"
                  class="group inline-block active:opacity-80"
                  ><span
                    class="underline underline-offset-4 group-hover:no-underline"
                  >
                    {{ same_task.get_variant(lang) }}
                  </span>
                </a>
              </li>
            {% endfor %}
          </ul>
        </div>
      </aside>
    </div>
  </main>

  <script src="https://www.geogebra.org/apps/deployggb.js"></script>
  <script>
    window.mobileCheck = function() {
        let check = false;
        (
          function(a)
          {
            if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) 
              check = true;
          }
        )
        (
          navigator.userAgent||navigator.vendor||window.opera
        );
        return check;
    };

    let elements = document.getElementsByClassName("ggb-element")
    for (let i = 0; i < elements.length; i++)
    {
        console.log("looking through " + elements[i].id);
        let params = 
        {
          "showToolBar": true,
          "showAlgebraInput": false,
          "showMenuBar": false,
          "customToolBar": "0 | 17 62 14 6 | 10 2 1 |",
          "showFullscreenButton": true,
          "width": 600,
          "height": 600,
          "filename": elements[i].id,
          "appletOnLoad": function(api){
              api.evalCommand('ZoomOut(2.7)');
              setTimeout(function(){api.evalCommand('Pan(-200,0)')}, 150);
          }
        };
        if(window.mobileCheck()){
          params.width = 350;
          params.height = 420;
          params.appletOnLoad = function(api){
              api.evalCommand('ZoomOut(5.5)');
              setTimeout(function(){api.evalCommand('Pan(-100,0)')}, 150);
          }
        }
      let applet = new GGBApplet(params, true);

      window.addEventListener("load", function () {
        applet.inject(elements[i].id);
        console.log("loading " + elements[i].id);
      });
      
    }
    console.log("finishing");


  </script>
{% endblock %}
{% block tippy_script %}
  <script>
    tippy("[data-tippy-content]", {
      interactive: true,
      delay: [0, 50],
      animation: "scale-subtle",
    });
  </script>
{% endblock %}
